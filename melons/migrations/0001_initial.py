# Generated by Django 3.1.6 on 2021-03-10 13:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('card_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('card_type', models.IntegerField()),
                ('card_content', models.TextField()),
                ('card_create_date', models.DateTimeField(auto_now_add=True)),
                ('card_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('code', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=64, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gold', models.IntegerField(blank=True, default=0, null=True)),
                ('score', models.IntegerField(blank=True, default=0, null=True)),
                ('title', models.CharField(blank=True, max_length=16, null=True)),
                ('course', models.CharField(blank=True, max_length=64, null=True)),
                ('team', models.CharField(blank=True, max_length=64, null=True)),
                ('society', models.CharField(blank=True, max_length=64, null=True)),
                ('avatar', models.ImageField(null=True, upload_to='avatars')),
                ('achievements', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='melons.achievement')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Society',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='melons_tag_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='melons_tag_items', to='taggit.tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Society_Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_join', models.DateField(auto_now_add=True)),
                ('level', models.IntegerField(default=0)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='melons.profile')),
                ('society', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='melons.society')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('opt_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('opt_type', models.CharField(default='TXT', max_length=3)),
                ('opt_content', models.CharField(max_length=512)),
                ('opt_isCorrect', models.BooleanField(default=False)),
                ('opt_cid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='melons.card')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('item_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('item_amount', models.IntegerField(default=1)),
                ('item_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='melons.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comt_id', models.UUIDField(default=uuid.UUID('24c78779-4512-4260-9db6-a468c225965c'), editable=False, primary_key=True, serialize=False)),
                ('comt_type', models.CharField(max_length=1)),
                ('comt_father_id', models.CharField(max_length=64)),
                ('comt_content', models.TextField()),
                ('comt_time', models.DateTimeField(auto_now=True)),
                ('comt_like', models.IntegerField()),
                ('comt_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('coll_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('coll_title', models.CharField(max_length=64)),
                ('coll_description', models.CharField(max_length=512)),
                ('coll_create_date', models.DateTimeField(auto_now_add=True)),
                ('coll_cards', models.ManyToManyField(to='melons.Card')),
                ('coll_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('coll_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='melons.Tag', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.AddField(
            model_name='card',
            name='card_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='melons.Tag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('blog_id', models.UUIDField(default=uuid.UUID('3bbbac99-8c3a-4a74-806a-4783b6f3d750'), editable=False, primary_key=True, serialize=False)),
                ('blog_pin', models.BooleanField(default=False)),
                ('blog_title', models.CharField(max_length=64)),
                ('blog_content', models.TextField()),
                ('blog_time', models.DateTimeField(auto_now=True)),
                ('blog_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='melons.Tag', to='taggit.Tag', verbose_name='Tags')),
                ('blog_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
